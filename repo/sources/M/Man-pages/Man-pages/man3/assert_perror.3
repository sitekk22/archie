'\" t
.\" Copyright (C) 2002 Andries Brouwer <aeb@cwi.nl>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.\" This replaces an earlier man page written by Walter Harms
.\" <walter.harms@informatik.uni-oldenburg.de>.
.\"
.TH assert_perror 3 2022-12-15 "Linux man-pages 6.03"
.SH NAME
assert_perror \- test errnum and abort
.SH LIBRARY
Standard C library
.RI ( libc ", " \-lc )
.SH SYNOPSIS
.nf
.BR "#define _GNU_SOURCE" "         /* See feature_test_macros(7) */"
.B #include <assert.h>
.PP
.BI "void assert_perror(int " errnum );
.fi
.SH DESCRIPTION
If the macro
.B NDEBUG
was defined at the moment
.I <assert.h>
was last included, the macro
.BR assert_perror ()
generates no code, and hence does nothing at all.
Otherwise, the macro
.BR assert_perror ()
prints an error message to standard error and terminates the program
by calling
.BR abort (3)
if
.I errnum
is nonzero.
The message contains the filename, function name and
line number of the macro call, and the output of
.IR strerror(errnum) .
.SH RETURN VALUE
No value is returned.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.BR assert_perror ()
T}	Thread safety	MT-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
This is a GNU extension.
.SH BUGS
The purpose of the assert macros is to help programmers find bugs in
their programs, things that cannot happen unless there was a coding mistake.
However, with system or library calls the situation is rather different,
and error returns can happen, and will happen, and should be tested for.
Not by an assert, where the test goes away when
.B NDEBUG
is defined,
but by proper error handling code.
Never use this macro.
.SH SEE ALSO
.BR abort (3),
.BR assert (3),
.BR exit (3),
.BR strerror (3)
