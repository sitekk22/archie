'\" t
.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" SPDX-License-Identifier: Linux-man-pages-copyleft
.\"
.TH rint 3 2023-02-05 "Linux man-pages 6.03"
.SH NAME
nearbyint, nearbyintf, nearbyintl, rint, rintf, rintl \- round
to nearest integer
.SH LIBRARY
Math library
.RI ( libm ", " \-lm )
.SH SYNOPSIS
.nf
.B #include <math.h>
.PP
.BI "double nearbyint(double " x );
.BI "float nearbyintf(float " x );
.BI "long double nearbyintl(long double " x );
.PP
.BI "double rint(double " x );
.BI "float rintf(float " x );
.BI "long double rintl(long double " x );
.fi
.PP
.RS -4
Feature Test Macro Requirements for glibc (see
.BR feature_test_macros (7)):
.RE
.PP
.BR nearbyint (),
.BR nearbyintf (),
.BR nearbyintl ():
.nf
    _POSIX_C_SOURCE >= 200112L || _ISOC99_SOURCE
.fi
.PP
.BR rint ():
.nf
    _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
        || _XOPEN_SOURCE >= 500
.\"    || _XOPEN_SOURCE && _XOPEN_SOURCE_EXTENDED
        || /* Since glibc 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.fi
.PP
.BR rintf (),
.BR rintl ():
.nf
    _ISOC99_SOURCE || _POSIX_C_SOURCE >= 200112L
        || /* Since glibc 2.19: */ _DEFAULT_SOURCE
        || /* glibc <= 2.19: */ _BSD_SOURCE || _SVID_SOURCE
.fi
.SH DESCRIPTION
The
.BR nearbyint (),
.BR nearbyintf (),
and
.BR nearbyintl ()
functions round their argument to an integer value in floating-point
format, using the current rounding direction (see
.BR fesetround (3))
and without raising the
.I inexact
exception.
When the current rounding direction is to nearest, these
functions round halfway cases to the even integer in accordance with
IEEE-754.
.PP
The
.BR rint (),
.BR rintf (),
and
.BR rintl ()
functions do the same, but will raise the
.I inexact
exception
.RB ( FE_INEXACT ,
checkable via
.BR fetestexcept (3))
when the result differs in value from the argument.
.SH RETURN VALUE
These functions return the rounded integer value.
.PP
If
.I x
is integral, +0, \-0, NaN, or infinite,
.I x
itself is returned.
.SH ERRORS
No errors occur.
POSIX.1-2001 documents a range error for overflows, but see NOTES.
.SH ATTRIBUTES
For an explanation of the terms used in this section, see
.BR attributes (7).
.ad l
.nh
.TS
allbox;
lbx lb lb
l l l.
Interface	Attribute	Value
T{
.BR nearbyint (),
.BR nearbyintf (),
.BR nearbyintl (),
.BR rint (),
.BR rintf (),
.BR rintl ()
T}	Thread safety	MT-Safe
.TE
.hy
.ad
.sp 1
.SH STANDARDS
C99, POSIX.1-2001, POSIX.1-2008.
.SH NOTES
SUSv2 and POSIX.1-2001 contain text about overflow (which might set
.I errno
to
.BR ERANGE ,
or raise an
.B FE_OVERFLOW
exception).
In practice, the result cannot overflow on any current machine,
so this error-handling stuff is just nonsense.
(More precisely, overflow can happen only when the maximum value
of the exponent is smaller than the number of mantissa bits.
For the IEEE-754 standard 32-bit and 64-bit floating-point numbers
the maximum value of the exponent is 127 (respectively, 1023),
and the number of mantissa bits
including the implicit bit
is 24 (respectively, 53).)
.PP
If you want to store the rounded value in an integer type,
you probably want to use one of the functions described in
.BR lrint (3)
instead.
.SH SEE ALSO
.BR ceil (3),
.BR floor (3),
.BR lrint (3),
.BR round (3),
.BR trunc (3)
